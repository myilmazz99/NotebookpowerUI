{"version":3,"sources":["Components/Tools/numberFormat.js","Redux/Actions/orderActions.js","Components/Cart/CartSummary.js","Components/Order/AddressForm.js","Components/Utilities/ValidationRules/OrderValidation.js","Pages/Order.js"],"names":["numberFormat","number","Intl","NumberFormat","undefined","style","currency","format","fulfillOrder","order","cartId","history","dispatch","a","webAPI","post","type","actionTypes","payload","put","push","dispatchActionResult","response","data","ErrorType","toLowerCase","includes","ErrorMessage","errorMessages","JSON","parse","getOrders","get","getOrderById","id","confirmOrder","orderId","connect","state","cartItems","cartReducer","buttonText","getTotalPrice","useState","totalPrice","setTotalPrice","useEffect","length","map","i","productQuantity","product","newPrice","reduce","j","className","value","onClick","to","AddressForm","handleChange","values","errors","Input","name","placeholder","fullName","error","phoneNumber","addressHeader","city","Textarea","addressDescription","OrderValidation","userCredentials","userReducer","authenticated","validationErrors","orderReducer","paymentError","bindActionCreators","userId","email","useHistory","useForm","handleSubmit","updateErrors","document","querySelector","innerText","errorsToAdd","forEach","propName","lowerCaseFirstChar","PropertyName","onSubmit","color","cardNumber","cardHolderName","securityNumber","expireMonth","expireYear","cvc","expiry","placeholders","CartSummary","buttonBehavior","price","Number"],"mappings":"gGAMeA,IANM,SAACC,GAAD,OACnB,IAAIC,KAAKC,kBAAaC,EAAW,CAC/BC,MAAO,WACPC,SAAU,QACTC,OAAON,K,2NCCCO,EAAe,SAACC,EAAOC,EAAQC,GAAhB,8CAA4B,WAAOC,GAAP,eAAAC,EAAA,+EAE9CC,IAAOC,KAAK,aAAcN,GAFoB,cAGpDG,EAAS,CAAEI,KAAMC,IAAoCC,QAAST,IAHV,SAI9CK,IAAOK,IAAP,oBAAwBT,IAJsB,OAKpDE,EAAS,CAAEI,KAAMC,MACjBN,EAAQS,KAAK,gBACbC,YACET,GACA,EACA,wIAVkD,kDAahD,KAAMU,SAASC,KAAKC,UAAUC,cAAcC,SAAS,WACvDd,EAAS,CACPI,KAAMC,IACNC,QAAS,KAAMI,SAASC,KAAKI,eAG/B,KAAML,SAASC,KAAKC,UAAUC,cAAcC,SAAS,eAEjDE,EAAgBC,KAAKC,MAAM,KAAMP,KAAKD,SAASK,cACnDf,EAAS,CACPI,KAAMC,IACNC,QAASU,KAGXP,YACET,GACA,EACA,gFA9BgD,0DAA5B,uDAoCfmB,EAAY,yDAAM,WAAOnB,GAAP,eAAAC,EAAA,+EAENC,IAAOkB,IAAI,cAFL,OAEvBV,EAFuB,OAG3BV,EAAS,CAAEI,KAAMC,IAAgCC,QAASI,EAASC,OAHxC,gDAK3BF,YACET,GACA,EACA,2HARyB,yDAAN,uDAaZqB,EAAe,SAACC,GAAD,8CAAQ,WAAOtB,GAAP,eAAAC,EAAA,+EAEXC,IAAOkB,IAAP,qBAAyBE,IAFd,OAE5BZ,EAF4B,OAGhCV,EAAS,CAAEI,KAAMC,IAA+BC,QAASI,EAASC,OAHlC,gDAKhCF,YACET,GACA,EACA,2HAR8B,yDAAR,uDAafuB,EAAe,SAACC,GAAD,8CAAa,WAAOxB,GAAP,eAAAC,EAAA,+EAEhBC,IAAOK,IAAP,qBAAyBiB,IAFT,OAEjCd,EAFiC,OAGrCV,EAAS,CACPI,KAAMC,IACNC,QAASI,EAASC,OALiB,gDAQrCF,YACET,GACA,EACA,6HAXmC,yDAAb,wD,oGCDbyB,iBAJE,SAACC,GAAD,MAAY,CAC3BC,UAAWD,EAAME,YAAYD,aAGhBF,EA3DK,SAAC,GAA8C,IAA5CI,EAA2C,EAA3CA,WAAYF,EAA+B,EAA/BA,UAAWG,EAAoB,EAApBA,cAAoB,EAC5BC,mBAAS,GADmB,mBACzDC,EADyD,KAC7CC,EAD6C,KAkBhE,OAfAC,qBAAU,WACJP,GAAkC,IAArBA,EAAUQ,QACzBF,EACEN,EACGS,KAAI,SAACC,GAAD,OAAOA,EAAEC,gBAAkBD,EAAEE,QAAQC,YACzCC,QAAO,SAACJ,EAAGK,GAAJ,OAAUL,EAAIK,MAGH,IAArBf,EAAUQ,QAAcF,EAAc,KACzC,CAACN,IAEJO,qBAAU,WACRJ,GAAiBA,EAAcE,KAC9B,CAACA,IAGF,wBAAIW,UAAU,gBACZ,qDACA,wBAAIA,UAAU,qBACZ,kDACA,8BAAOhB,EAAUQ,SAEnB,wBAAIQ,UAAU,qBACZ,mDACA,8BAAOvD,YAAa4C,KAEtB,wBAAIW,UAAU,qBACZ,mDACA,8BAAOvD,YAAa,KAEtB,6BACA,wBAAIuD,UAAU,qBACZ,wCACA,8BAAOvD,YAAa4C,KAEtB,4BACkB,iBAAfH,EACC,kBAAC,IAAD,CACEzB,KAAK,SACLwC,MAAOf,EACPgB,QAAS,kBAAMf,EAAc,CAAEE,kBAGjC,kBAAC,IAAD,CAAMc,GAAG,SAASH,UAAU,gBACzBd,S,qFCKEkB,EAvDK,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAC3C,OACE,yBAAKP,UAAU,WACb,qCACA,kBAACQ,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,WACLC,YAAY,0CACZL,aAAcA,EACdJ,MAAOK,EAAOK,SACdC,MAAOL,EAAOI,WAEhB,kBAACH,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,cACLC,YAAY,yBACZL,aAAcA,EACdJ,MAAOK,EAAOO,YACdD,MAAOL,EAAOM,cAEhB,kBAACL,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,gBACLC,YAAY,oCACZL,aAAcA,EACdJ,MAAOK,EAAOQ,cACdF,MAAOL,EAAOO,gBAEhB,kBAACN,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,OACLC,YAAY,aACZL,aAAcA,EACdJ,MAAOK,EAAOS,KACdH,MAAOL,EAAOQ,OAEhB,kBAACP,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,QACLC,YAAY,OACZL,aAAcA,EACdJ,MAAOK,EAAOvB,MACd6B,MAAOL,EAAOxB,QAEhB,kBAACiC,EAAA,EAAD,CACEP,KAAK,qBACLC,YAAY,QACZL,aAAcA,EACdJ,MAAOK,EAAOW,mBACdL,MAAOL,EAAOU,uB,iBCrCPC,EAhBS,SAACZ,GACvB,IAAIC,EAAS,GAYb,OAVKD,EAAOK,WAAUJ,EAAOI,SAAW,qDACnCL,EAAOO,cACVN,EAAOM,YAAc,mDAClBP,EAAOQ,gBACVP,EAAOO,cAAgB,6EACpBR,EAAOS,OAAMR,EAAOQ,KAAO,sDAC3BT,EAAOvB,QAAOwB,EAAOxB,MAAQ,gDAC7BuB,EAAOW,qBACVV,EAAOU,mBAAqB,iDAEvBV,G,yCC8IMzB,uBAZS,SAACC,GAAD,MAAY,CAClCE,YAAaF,EAAME,YACnBkC,gBAAiBpC,EAAMqC,YAAYD,gBACnCE,cAAetC,EAAMqC,YAAYC,cACjCC,iBAAkBvC,EAAMwC,aAAahB,OACrCiB,aAAczC,EAAMwC,aAAaC,iBAGR,SAACnE,GAAD,MAAe,CACxCJ,aAAcwE,YAAmBxE,IAAcI,MAGlCyB,EA9ID,SAAC,GAOR,IAAD,IANJG,YAAe9B,EAMX,EANWA,OAAQ6B,EAMnB,EANmBA,UACvBqC,EAKI,EALJA,cAKI,IAJJF,gBAAmBO,EAIf,EAJeA,OAAQC,EAIvB,EAJuBA,MAC3B1E,EAGI,EAHJA,aACAqE,EAEI,EAFJA,iBACAE,EACI,EADJA,aAEMpE,EAAUwE,cADZ,EAE+DC,aA2BnE,SAAkBvB,GAChBA,EAAOtB,UAAYA,EACnBsB,EAAOoB,OAASA,EAChBpB,EAAOqB,MAAQA,EAEf1E,EAAaqD,EAAQnD,EAAQC,KA9B7B8D,GAFIb,EAFF,EAEEA,aAAcyB,EAFhB,EAEgBA,aAAcxB,EAF9B,EAE8BA,OAAQC,EAFtC,EAEsCA,OAAQwB,EAF9C,EAE8CA,aAKlDxC,qBAAU,YACc,IAAlB8B,GAAyBjE,EAAQS,KAAK,QACjB,IAArBmB,EAAUQ,QAAcpC,EAAQS,KAAK,WACxC,IAEH0B,qBAAU,WACRyC,SAASC,cAAc,wBAAwBC,UAC7C,wBACD,IAEH3C,qBAAU,WACR,GAAI+B,EAAiB9B,OAAS,EAAG,CAC/B,IAAI2C,EAAc,GAClBb,EAAiBc,SAAQ,SAAC1C,GACxB,IAAI2C,EAAWC,YAAmB5C,EAAE6C,cACpCJ,EAAYE,GAAY3C,EAAEtB,gBAG5B2D,EAAaI,MAEd,CAACb,IAcJ,OACE,0BAAM3C,GAAG,SACP,0BAAMqB,UAAU,gBAAgBwC,SAAUV,GACxC,kBAAC,EAAD,CACEzB,aAAcA,EACdC,OAAQA,EACRC,OAAQA,IAEV,6BAASP,UAAU,eACjB,8CACCwB,GACC,0BAAM1E,MAAO,CAAE2F,MAAO,QAAtB,MAAmCjB,GAErC,6BAASxB,UAAU,uBACjB,6BAASA,UAAU,sBACjB,kBAACQ,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,aACLC,YAAY,qBACZL,aAAcA,EACdJ,MAAOK,EAAOoC,YAAc,GAC5B9B,MAAOL,EAAOmC,YAAcnC,EAAOmC,aAErC,kBAAClC,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,iBACLC,YAAY,0BACZL,aAAcA,EACdJ,MAAOK,EAAOqC,gBAAkB,GAChC/B,MAAOL,EAAOoC,gBAAkBpC,EAAOoC,iBAEzC,kBAACnC,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,iBACLC,YAAY,mBACZL,aAAcA,EACdJ,MAAOK,EAAOsC,gBAAkB,GAChChC,MAAOL,EAAOqC,gBAAkBrC,EAAOqC,iBAEzC,yBAAK5C,UAAU,eACb,sDACA,kBAACQ,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,cACLC,YAAY,KACZL,aAAcA,EACdJ,MAAOK,EAAOuC,aAAe,GAC7BjC,MAAOL,EAAOsC,aAAetC,EAAOsC,cAEtC,kBAACrC,EAAA,EAAD,CACE/C,KAAK,OACLgD,KAAK,aACLC,YAAY,WACZL,aAAcA,EACdJ,MAAOK,EAAOwC,YAAc,GAC5BlC,MAAOL,EAAOuC,YAAcvC,EAAOuC,eAIzC,kBAAC,IAAD,CACEC,IAAKzC,EAAOsC,gBAAkB,GAC9BI,OACE1C,EAAOwC,YAAcxC,EAAOuC,YACxBvC,EAAOuC,YAAcvC,EAAOwC,WAC5B,GAENrC,KAAMH,EAAOqC,gBAAkB,GAC/BjG,OAAQ4D,EAAOoC,YAAc,GAC7BO,aAAc,CAAExC,KAAM,mBAI5B,kBAACyC,EAAA,EAAD,CACEhE,WAAW,eACXiE,eAAe,eACfhE,cA/Ec,SAACiE,GACrB9C,EAAOjB,WAAagE,OAAOD","file":"static/js/9.d0d5a038.chunk.js","sourcesContent":["const numberFormat = (number) =>\r\n  new Intl.NumberFormat(undefined, {\r\n    style: \"currency\",\r\n    currency: \"TRY\",\r\n  }).format(number);\r\n\r\nexport default numberFormat;\r\n","import * as actionTypes from \"../Actions/actionTypes\";\r\n\r\nimport webAPI from \"../../Axios/webAPI\";\r\nimport dispatchActionResult from \"./dispatchActionResult\";\r\n\r\nexport const fulfillOrder = (order, cartId, history) => async (dispatch) => {\r\n  try {\r\n    await webAPI.post(\"api/orders\", order);\r\n    dispatch({ type: actionTypes.COMPLETE_ORDER_SUCCESS, payload: order });\r\n    await webAPI.put(`api/carts/${cartId}`);\r\n    dispatch({ type: actionTypes.CLEAR_CART });\r\n    history.push(\"/user/orders\");\r\n    dispatchActionResult(\r\n      dispatch,\r\n      true,\r\n      \"Ödemeniz alındı. En kısa sürede siparişinizi onaylayacağız İyi alışverişler.\"\r\n    );\r\n  } catch (error) {\r\n    if (error.response.data.ErrorType.toLowerCase().includes(\"payment\")) {\r\n      dispatch({\r\n        type: actionTypes.SET_PAYMENT_ERROR,\r\n        payload: error.response.data.ErrorMessage,\r\n      });\r\n    } else if (\r\n      error.response.data.ErrorType.toLowerCase().includes(\"validation\")\r\n    ) {\r\n      let errorMessages = JSON.parse(error.data.response.ErrorMessage);\r\n      dispatch({\r\n        type: actionTypes.SET_ORDER_ERROR,\r\n        payload: errorMessages,\r\n      });\r\n    } else {\r\n      dispatchActionResult(\r\n        dispatch,\r\n        false,\r\n        \"Ödeme gerçekleştirilemedi. Lütfen daha sonra tekrar deneyiniz.\"\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const getOrders = () => async (dispatch) => {\r\n  try {\r\n    let response = await webAPI.get(\"api/orders\");\r\n    dispatch({ type: actionTypes.GET_ORDERS_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    dispatchActionResult(\r\n      dispatch,\r\n      false,\r\n      \"Siparişler getirilemedi. Lütfen daha sonra tekrar deneyiniz veya yazılım ekibimize durumu bildiriniz.\"\r\n    );\r\n  }\r\n};\r\n\r\nexport const getOrderById = (id) => async (dispatch) => {\r\n  try {\r\n    let response = await webAPI.get(`api/orders/${id}`);\r\n    dispatch({ type: actionTypes.GET_ORDER_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    dispatchActionResult(\r\n      dispatch,\r\n      false,\r\n      \"Sipariş bulunamadı. Lütfen daha sonra tekrar deneyiniz veya yazılım ekibimize durumu bildiriniz.\"\r\n    );\r\n  }\r\n};\r\n\r\nexport const confirmOrder = (orderId) => async (dispatch) => {\r\n  try {\r\n    let response = await webAPI.put(`api/orders/${orderId}`);\r\n    dispatch({\r\n      type: actionTypes.CONFIRM_ORDER_SUCCESS,\r\n      payload: response.data,\r\n    });\r\n  } catch (error) {\r\n    dispatchActionResult(\r\n      dispatch,\r\n      false,\r\n      \"Sipariş onaylanamadı. Lütfen daha sonra tekrar deneyiniz veya yazılım ekibimize durumu bildiriniz.\"\r\n    );\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Input from \"../Utilities/Input\";\r\nimport numberFormat from \"../Tools/numberFormat\";\r\n\r\nconst CartSummary = ({ buttonText, cartItems, getTotalPrice }) => {\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (cartItems && cartItems.length !== 0)\r\n      setTotalPrice(\r\n        cartItems\r\n          .map((i) => i.productQuantity * i.product.newPrice)\r\n          .reduce((i, j) => i + j)\r\n      );\r\n\r\n    if (cartItems.length === 0) setTotalPrice(0);\r\n  }, [cartItems]);\r\n\r\n  useEffect(() => {\r\n    getTotalPrice && getTotalPrice(totalPrice);\r\n  }, [totalPrice]);\r\n\r\n  return (\r\n    <ul className=\"cart-summary\">\r\n      <h2>Sipariş Özeti</h2>\r\n      <li className=\"cart-summary-item\">\r\n        <span>Ürün Adedi</span>\r\n        <span>{cartItems.length}</span>\r\n      </li>\r\n      <li className=\"cart-summary-item\">\r\n        <span>Ödenecek Tutar</span>\r\n        <span>{numberFormat(totalPrice)}</span>\r\n      </li>\r\n      <li className=\"cart-summary-item\">\r\n        <span>Kargo Tutarı</span>\r\n        <span>{numberFormat(0)}</span>\r\n      </li>\r\n      <hr />\r\n      <li className=\"cart-summary-item\">\r\n        <span>Toplam</span>\r\n        <span>{numberFormat(totalPrice)}</span>\r\n      </li>\r\n      <li>\r\n        {buttonText === \"Ödeme Yap\" ? (\r\n          <Input\r\n            type=\"submit\"\r\n            value={buttonText}\r\n            onClick={() => getTotalPrice({ totalPrice })}\r\n          />\r\n        ) : (\r\n          <Link to=\"/order\" className=\"checkout-btn\">\r\n            {buttonText}\r\n          </Link>\r\n        )}\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapState = (state) => ({\r\n  cartItems: state.cartReducer.cartItems,\r\n});\r\n\r\nexport default connect(mapState)(CartSummary);\r\n","import React from \"react\";\r\nimport Input from \"../Utilities/Input\";\r\nimport Textarea from \"../Utilities/Textarea\";\r\n\r\nconst AddressForm = ({ handleChange, values, errors }) => {\r\n  return (\r\n    <div className=\"address\">\r\n      <h2>Adres</h2>\r\n      <Input\r\n        type=\"text\"\r\n        name=\"fullName\"\r\n        placeholder=\"Adınız ve Soyadınız\"\r\n        handleChange={handleChange}\r\n        value={values.fullName}\r\n        error={errors.fullName}\r\n      />\r\n      <Input\r\n        type=\"text\"\r\n        name=\"phoneNumber\"\r\n        placeholder=\"Telefon numaranız\"\r\n        handleChange={handleChange}\r\n        value={values.phoneNumber}\r\n        error={errors.phoneNumber}\r\n      />\r\n      <Input\r\n        type=\"text\"\r\n        name=\"addressHeader\"\r\n        placeholder=\"Adres Başlığı\"\r\n        handleChange={handleChange}\r\n        value={values.addressHeader}\r\n        error={errors.addressHeader}\r\n      />\r\n      <Input\r\n        type=\"text\"\r\n        name=\"city\"\r\n        placeholder=\"Şehir\"\r\n        handleChange={handleChange}\r\n        value={values.city}\r\n        error={errors.city}\r\n      />\r\n      <Input\r\n        type=\"text\"\r\n        name=\"state\"\r\n        placeholder=\"Semt\"\r\n        handleChange={handleChange}\r\n        value={values.state}\r\n        error={errors.state}\r\n      />\r\n      <Textarea\r\n        name=\"addressDescription\"\r\n        placeholder=\"Adres\"\r\n        handleChange={handleChange}\r\n        value={values.addressDescription}\r\n        error={errors.addressDescription}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressForm;\r\n","const OrderValidation = (values) => {\r\n  let errors = {};\r\n\r\n  if (!values.fullName) errors.fullName = \"İsim alanını doldurmak zorunludur.\";\r\n  if (!values.phoneNumber)\r\n    errors.phoneNumber = \"Telefon alanını doldurmak zorunludur.\";\r\n  if (!values.addressHeader)\r\n    errors.addressHeader = \"Adres başlığı alanını doldurmak zorunludur.\";\r\n  if (!values.city) errors.city = \"Şehir alanını doldurmak zorunludur.\";\r\n  if (!values.state) errors.state = \"Semt alanını doldurmak zorunludur.\";\r\n  if (!values.addressDescription)\r\n    errors.addressDescription = \"Adres alanını doldurmak zorunludur.\";\r\n\r\n  return errors;\r\n};\r\n\r\nexport default OrderValidation;\r\n","import React, { useEffect } from \"react\";\r\nimport CartSummary from \"../Components/Cart/CartSummary\";\r\nimport AddressForm from \"../Components/Order/AddressForm\";\r\nimport Input from \"../Components/Utilities/Input\";\r\nimport Cards from \"react-credit-cards\";\r\nimport useForm from \"../Components/Utilities/useForm\";\r\nimport OrderValidation from \"../Components/Utilities/ValidationRules/OrderValidation\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { fulfillOrder } from \"../Redux/Actions/orderActions\";\r\nimport lowerCaseFirstChar from \"../Components/Tools/lowerCaseFirstChar\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Order = ({\r\n  cartReducer: { cartId, cartItems },\r\n  authenticated,\r\n  userCredentials: { userId, email },\r\n  fulfillOrder,\r\n  validationErrors,\r\n  paymentError,\r\n}) => {\r\n  const history = useHistory();\r\n  let { handleChange, handleSubmit, values, errors, updateErrors } = useForm(\r\n    checkout,\r\n    OrderValidation\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (authenticated === false) history.push(\"/404\");\r\n    if (cartItems.length === 0) history.push(\"/cart\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\".rccs__expiry__valid\").innerText =\r\n      \"Son kullanma tarihi\";\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (validationErrors.length > 0) {\r\n      let errorsToAdd = {};\r\n      validationErrors.forEach((i) => {\r\n        let propName = lowerCaseFirstChar(i.PropertyName);\r\n        errorsToAdd[propName] = i.ErrorMessage;\r\n      });\r\n\r\n      updateErrors(errorsToAdd);\r\n    }\r\n  }, [validationErrors]);\r\n\r\n  function checkout(values) {\r\n    values.cartItems = cartItems;\r\n    values.userId = userId;\r\n    values.email = email;\r\n\r\n    fulfillOrder(values, cartId, history);\r\n  }\r\n\r\n  const getTotalPrice = (price) => {\r\n    values.totalPrice = Number(price);\r\n  };\r\n\r\n  return (\r\n    <main id=\"order\">\r\n      <form className=\"order-wrapper\" onSubmit={handleSubmit}>\r\n        <AddressForm\r\n          handleChange={handleChange}\r\n          values={values}\r\n          errors={errors}\r\n        />\r\n        <section className=\"credit-card\">\r\n          <h2>Kart Bilgileri</h2>\r\n          {paymentError && (\r\n            <span style={{ color: \"red\" }}>** {paymentError}</span>\r\n          )}\r\n          <section className=\"credit-card-details\">\r\n            <section className=\"card-input-wrapper\">\r\n              <Input\r\n                type=\"text\"\r\n                name=\"cardNumber\"\r\n                placeholder=\"Kart Numarası\"\r\n                handleChange={handleChange}\r\n                value={values.cardNumber || \"\"}\r\n                error={errors.cardNumber && errors.cardNumber}\r\n              />\r\n              <Input\r\n                type=\"text\"\r\n                name=\"cardHolderName\"\r\n                placeholder=\"Kart üzerindeki isim\"\r\n                handleChange={handleChange}\r\n                value={values.cardHolderName || \"\"}\r\n                error={errors.cardHolderName && errors.cardHolderName}\r\n              />\r\n              <Input\r\n                type=\"text\"\r\n                name=\"securityNumber\"\r\n                placeholder=\"Güvenlik Kodu\"\r\n                handleChange={handleChange}\r\n                value={values.securityNumber || \"\"}\r\n                error={errors.securityNumber && errors.securityNumber}\r\n              />\r\n              <div className=\"input-group\">\r\n                <label>Son kullanma tarihi</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"expireMonth\"\r\n                  placeholder=\"Ay\"\r\n                  handleChange={handleChange}\r\n                  value={values.expireMonth || \"\"}\r\n                  error={errors.expireMonth && errors.expireMonth}\r\n                />\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"expireYear\"\r\n                  placeholder=\"Yıl\"\r\n                  handleChange={handleChange}\r\n                  value={values.expireYear || \"\"}\r\n                  error={errors.expireYear && errors.expireYear}\r\n                />\r\n              </div>\r\n            </section>\r\n            <Cards\r\n              cvc={values.securityNumber || \"\"}\r\n              expiry={\r\n                values.expireYear && values.expireMonth\r\n                  ? values.expireMonth + values.expireYear\r\n                  : \"\"\r\n              }\r\n              name={values.cardHolderName || \"\"}\r\n              number={values.cardNumber || \"\"}\r\n              placeholders={{ name: \"Kart Sahibi\" }}\r\n            />\r\n          </section>\r\n        </section>\r\n        <CartSummary\r\n          buttonText=\"Ödeme Yap\"\r\n          buttonBehavior=\"FulfillOrder\"\r\n          getTotalPrice={getTotalPrice}\r\n        />\r\n      </form>\r\n    </main>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartReducer: state.cartReducer,\r\n  userCredentials: state.userReducer.userCredentials,\r\n  authenticated: state.userReducer.authenticated,\r\n  validationErrors: state.orderReducer.errors,\r\n  paymentError: state.orderReducer.paymentError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fulfillOrder: bindActionCreators(fulfillOrder, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Order);\r\n"],"sourceRoot":""}